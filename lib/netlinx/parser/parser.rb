#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'netlinx/parser/lexer'
require 'netlinx/parser/nodes'

module NetLinx
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 92)

  def initialize data, ignore_comments: true
    @data = data
    @ignore_comments = ignore_comments
    
    @lexer = NetLinx::Lexer.new data
    # Convert all token names to uppercase.
    @tokens = @lexer.run.map! { |t| [t[0].upcase, t[1]] }
    # p @tokens
  end
  
  def parse
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
  
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    19,    28,    29,    30,    31,     5,    22,    20,    24,    25,
    26,    23,   nil,    19,   nil,   nil,   nil,   nil,     5,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     9,    10,    11,   nil,    12,   nil,    13,    14,
    15,    16,    17,    18,     8,     9,    10,    11,   nil,    12,
   nil,    13,    14,    15,    16,    17,    18,     8 ]

racc_action_check = [
     0,    24,    24,    24,    24,     0,     4,     1,    19,    20,
    23,     8,   nil,     2,   nil,   nil,   nil,   nil,     2,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     0,     0,     0,   nil,     0,   nil,     0,     0,
     0,     0,     0,     0,     0,     2,     2,     2,   nil,     2,
   nil,     2,     2,     2,     2,     2,     2,     2 ]

racc_action_pointer = [
    -2,     7,    11,   nil,    -1,   nil,   nil,   nil,   -55,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -58,
     9,   nil,   nil,     4,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil ]

racc_action_default = [
    -2,   -27,    -1,    -4,    -8,    -7,    -9,   -10,   -27,   -12,
   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -21,   -27,
   -27,    -3,    -6,   -27,   -27,    32,   -11,   -22,   -23,   -24,
   -25,   -26 ]

racc_goto_table = [
     3,     1,    21,     2,    27 ]

racc_goto_check = [
     3,     1,     3,     2,     7 ]

racc_goto_pointer = [
   nil,     1,     3,     0,   nil,   nil,   nil,   -20 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4,     6,     7,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 69, :_reduce_1,
  0, 69, :_reduce_2,
  2, 70, :_reduce_3,
  1, 70, :_reduce_4,
  0, 70, :_reduce_5,
  2, 72, :_reduce_none,
  1, 72, :_reduce_7,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  1, 71, :_reduce_none,
  3, 73, :_reduce_11,
  1, 73, :_reduce_12,
  1, 73, :_reduce_13,
  1, 73, :_reduce_14,
  1, 73, :_reduce_15,
  1, 73, :_reduce_16,
  1, 73, :_reduce_17,
  1, 73, :_reduce_18,
  1, 73, :_reduce_19,
  1, 73, :_reduce_20,
  1, 73, :_reduce_21,
  3, 74, :_reduce_22,
  1, 75, :_reduce_23,
  1, 75, :_reduce_24,
  1, 75, :_reduce_25,
  1, 75, :_reduce_26 ]

racc_reduce_n = 27

racc_shift_n = 32

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :DPS => 3,
  :NUMBER => 4,
  :DECIMAL => 5,
  :STRING => 6,
  :COMMENT => 7,
  :CHAR => 8,
  :WIDECHAR => 9,
  :INTEGER => 10,
  :SINTEGER => 11,
  :LONG => 12,
  :SLONG => 13,
  :FLOAT => 14,
  :DOUBLE => 15,
  :DEV => 16,
  :DEVCHAN => 17,
  :IF => 18,
  :ELSE => 19,
  :SELECT => 20,
  :ACTIVE => 21,
  :SWITCH => 22,
  :CASE => 23,
  :FOR => 24,
  :WHILE => 25,
  :MEDIUM_WHILE => 26,
  :LONG_WHILE => 27,
  :BREAK => 28,
  :DEFAULT => 29,
  :RETURN => 30,
  :DEFINE_CALL => 31,
  :DEFINE_COMBINE => 32,
  :DEFINE_CONNECT_LEVEL => 33,
  :DEFINE_CONSTANT => 34,
  :DEFINE_DEVICE => 35,
  :DEFINE_EVENT => 36,
  :DEFINE_FUNCTION => 37,
  :DEFINE_LATCHING => 38,
  :DEFINE_MODULE => 39,
  :DEFINE_MUTUALLY_EXCLUSIVE => 40,
  :DEFINE_PROGRAM => 41,
  :DEFINE_START => 42,
  :DEFINE_TOGGLING => 43,
  :DEFINE_TYPE => 44,
  :DEFINE_VARIABLE => 45,
  :PROGRAM_NAME => 46,
  :BUTTON_EVENT => 47,
  :CHANNEL_EVENT => 48,
  :DATA_EVENT => 49,
  :LEVEL_EVENT => 50,
  :REBUILD_EVENT => 51,
  "." => 52,
  "!" => 53,
  "*" => 54,
  "/" => 55,
  "+" => 56,
  "-" => 57,
  ">" => 58,
  ">=" => 59,
  "<" => 60,
  "<=" => 61,
  "==" => 62,
  "!=" => 63,
  "&&" => 64,
  "||" => 65,
  "=" => 66,
  "," => 67 }

racc_nt_base = 68

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "DPS",
  "NUMBER",
  "DECIMAL",
  "STRING",
  "COMMENT",
  "CHAR",
  "WIDECHAR",
  "INTEGER",
  "SINTEGER",
  "LONG",
  "SLONG",
  "FLOAT",
  "DOUBLE",
  "DEV",
  "DEVCHAN",
  "IF",
  "ELSE",
  "SELECT",
  "ACTIVE",
  "SWITCH",
  "CASE",
  "FOR",
  "WHILE",
  "MEDIUM_WHILE",
  "LONG_WHILE",
  "BREAK",
  "DEFAULT",
  "RETURN",
  "DEFINE_CALL",
  "DEFINE_COMBINE",
  "DEFINE_CONNECT_LEVEL",
  "DEFINE_CONSTANT",
  "DEFINE_DEVICE",
  "DEFINE_EVENT",
  "DEFINE_FUNCTION",
  "DEFINE_LATCHING",
  "DEFINE_MODULE",
  "DEFINE_MUTUALLY_EXCLUSIVE",
  "DEFINE_PROGRAM",
  "DEFINE_START",
  "DEFINE_TOGGLING",
  "DEFINE_TYPE",
  "DEFINE_VARIABLE",
  "PROGRAM_NAME",
  "BUTTON_EVENT",
  "CHANNEL_EVENT",
  "DATA_EVENT",
  "LEVEL_EVENT",
  "REBUILD_EVENT",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "$start",
  "program",
  "expressions",
  "expression",
  "comments",
  "define_section",
  "assignment",
  "value" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_1(val, _values)
     Program.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_2(val, _values)
     Program.new 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_3(val, _values)
     val.flatten.compact 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_4(val, _values)
     val 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_5(val, _values)
     nil 
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_7(val, _values)
     @ignore_comments ? nil : Comment.new(val[0]) 
  end
.,.,

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

module_eval(<<'.,.,', 'parser.y', 50)
  def _reduce_11(val, _values)
     ProgramName.new val[2]      
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_12(val, _values)
     DefineConstant.new          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 52)
  def _reduce_13(val, _values)
     DefineDevice.new            
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 53)
  def _reduce_14(val, _values)
     DefineEvent.new             
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 54)
  def _reduce_15(val, _values)
     DefineLatching.new          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 55)
  def _reduce_16(val, _values)
     DefineMutuallyExclusive.new 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_17(val, _values)
     DefineProgram.new           
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_18(val, _values)
     DefineStart.new             
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 58)
  def _reduce_19(val, _values)
     DefineToggling.new          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 59)
  def _reduce_20(val, _values)
     DefineType.new              
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_21(val, _values)
     DefineVariable.new          
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_22(val, _values)
     Assignment.new val[0], val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_23(val, _values)
     DPS.new    *val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 69)
  def _reduce_24(val, _values)
     Number.new  val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_25(val, _values)
     Decimal.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_26(val, _values)
     String.new  val[0] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module NetLinx
