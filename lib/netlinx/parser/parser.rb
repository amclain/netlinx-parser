#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'netlinx/parser/lexer'
require 'netlinx/parser/nodes'

module NetLinx
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 113)

  def initialize data, ignore_comments: true
    @data = data
    @ignore_comments = ignore_comments
    
    @lexer = NetLinx::Lexer.new data
    # Convert all token names to uppercase.
    @tokens = @lexer.run.map! { |t| [t[0].upcase, t[1]] }
  end
  
  def parse
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
  
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    20,    41,    42,    43,    44,     4,    21,    22,    23,    24,
    25,    26,    27,    28,    29,    30,    20,    41,    42,    43,
    44,     4,    21,    22,    23,    24,    25,    26,    27,    28,
    29,    30,     9,    10,    11,    39,    12,    38,    13,    14,
    15,    16,    17,    18,     5,    36,    37,    35,     9,    10,
    11,    34,    12,    33,    13,    14,    15,    16,    17,    18,
     5,    41,    42,    43,    44,    31,    47 ]

racc_action_check = [
     0,    39,    39,    39,    39,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     2,    35,    35,    35,
    35,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     0,     0,     0,    34,     0,    34,     0,     0,
     0,     0,     0,     0,     0,    31,    33,    20,     2,     2,
     2,    19,     2,     5,     2,     2,     2,     2,     2,     2,
     2,    38,    38,    38,    38,     1,    45 ]

racc_action_pointer = [
    -2,    65,    14,   nil,   nil,   -13,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49,
   -19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    45,   nil,    40,   -31,    14,   nil,   nil,    58,    -2,
   nil,   nil,   nil,   nil,   nil,    -3,   nil,   nil ]

racc_action_default = [
    -2,   -40,    -1,    -4,    -6,   -40,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,   -40,
   -40,   -26,   -27,   -28,   -29,   -30,   -31,   -32,   -33,   -34,
   -35,   -40,    -3,   -40,   -21,   -40,    48,    -7,   -40,   -40,
   -24,   -36,   -37,   -38,   -39,   -40,   -23,   -22 ]

racc_goto_table = [
    40,     2,     1,    45,    46,     3,   nil,    32 ]

racc_goto_check = [
     8,     2,     1,     8,     8,     3,   nil,     3 ]

racc_goto_pointer = [
   nil,     2,     1,     5,   nil,   nil,   nil,   nil,   -35,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     6,     7,     8,    19,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 71, :_reduce_1,
  0, 71, :_reduce_2,
  2, 72, :_reduce_3,
  1, 72, :_reduce_4,
  0, 72, :_reduce_5,
  1, 73, :_reduce_6,
  3, 73, :_reduce_7,
  1, 73, :_reduce_8,
  1, 73, :_reduce_none,
  1, 73, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  1, 74, :_reduce_none,
  2, 75, :_reduce_21,
  5, 75, :_reduce_22,
  4, 75, :_reduce_23,
  3, 76, :_reduce_24,
  0, 79, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 77, :_reduce_none,
  1, 78, :_reduce_36,
  1, 78, :_reduce_37,
  1, 78, :_reduce_38,
  1, 78, :_reduce_39 ]

racc_reduce_n = 40

racc_shift_n = 48

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :DPS => 3,
  :NUMBER => 4,
  :DECIMAL => 5,
  :STRING => 6,
  :COMMENT => 7,
  :CHAR => 8,
  :WIDECHAR => 9,
  :INTEGER => 10,
  :SINTEGER => 11,
  :LONG => 12,
  :SLONG => 13,
  :FLOAT => 14,
  :DOUBLE => 15,
  :DEV => 16,
  :DEVCHAN => 17,
  :IF => 18,
  :ELSE => 19,
  :SELECT => 20,
  :ACTIVE => 21,
  :SWITCH => 22,
  :CASE => 23,
  :FOR => 24,
  :WHILE => 25,
  :MEDIUM_WHILE => 26,
  :LONG_WHILE => 27,
  :BREAK => 28,
  :DEFAULT => 29,
  :RETURN => 30,
  :DEFINE_CALL => 31,
  :DEFINE_COMBINE => 32,
  :DEFINE_CONNECT_LEVEL => 33,
  :DEFINE_CONSTANT => 34,
  :DEFINE_DEVICE => 35,
  :DEFINE_EVENT => 36,
  :DEFINE_FUNCTION => 37,
  :DEFINE_LATCHING => 38,
  :DEFINE_MODULE => 39,
  :DEFINE_MUTUALLY_EXCLUSIVE => 40,
  :DEFINE_PROGRAM => 41,
  :DEFINE_START => 42,
  :DEFINE_TOGGLING => 43,
  :DEFINE_TYPE => 44,
  :DEFINE_VARIABLE => 45,
  :PROGRAM_NAME => 46,
  :BUTTON_EVENT => 47,
  :CHANNEL_EVENT => 48,
  :DATA_EVENT => 49,
  :LEVEL_EVENT => 50,
  :REBUILD_EVENT => 51,
  "." => 52,
  "!" => 53,
  "*" => 54,
  "/" => 55,
  "+" => 56,
  "-" => 57,
  ">" => 58,
  ">=" => 59,
  "<" => 60,
  "<=" => 61,
  "==" => 62,
  "!=" => 63,
  "&&" => 64,
  "||" => 65,
  "=" => 66,
  "," => 67,
  "[" => 68,
  "]" => 69 }

racc_nt_base = 70

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "DPS",
  "NUMBER",
  "DECIMAL",
  "STRING",
  "COMMENT",
  "CHAR",
  "WIDECHAR",
  "INTEGER",
  "SINTEGER",
  "LONG",
  "SLONG",
  "FLOAT",
  "DOUBLE",
  "DEV",
  "DEVCHAN",
  "IF",
  "ELSE",
  "SELECT",
  "ACTIVE",
  "SWITCH",
  "CASE",
  "FOR",
  "WHILE",
  "MEDIUM_WHILE",
  "LONG_WHILE",
  "BREAK",
  "DEFAULT",
  "RETURN",
  "DEFINE_CALL",
  "DEFINE_COMBINE",
  "DEFINE_CONNECT_LEVEL",
  "DEFINE_CONSTANT",
  "DEFINE_DEVICE",
  "DEFINE_EVENT",
  "DEFINE_FUNCTION",
  "DEFINE_LATCHING",
  "DEFINE_MODULE",
  "DEFINE_MUTUALLY_EXCLUSIVE",
  "DEFINE_PROGRAM",
  "DEFINE_START",
  "DEFINE_TOGGLING",
  "DEFINE_TYPE",
  "DEFINE_VARIABLE",
  "PROGRAM_NAME",
  "BUTTON_EVENT",
  "CHANNEL_EVENT",
  "DATA_EVENT",
  "LEVEL_EVENT",
  "REBUILD_EVENT",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\"[\"",
  "\"]\"",
  "$start",
  "program",
  "expressions",
  "expression",
  "define_section",
  "definition",
  "assignment",
  "type",
  "value",
  "comparison" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_1(val, _values)
     Program.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_2(val, _values)
     Program.new 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_3(val, _values)
     val.flatten.compact 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_4(val, _values)
     val 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_5(val, _values)
     
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_6(val, _values)
     Comment.new(val[0]) unless @ignore_comments 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 40)
  def _reduce_7(val, _values)
     ProgramName.new val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_8(val, _values)
     DefineSection.new val[0].downcase.to_sym 
  end
.,.,

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

module_eval(<<'.,.,', 'parser.y', 60)
  def _reduce_21(val, _values)
     Definition.new val[1], nil,    val[0].downcase.to_sym 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 63)
  def _reduce_22(val, _values)
     Definition.new val[1], Array.new(val[3].to_i, nil), val[0].downcase.to_sym 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 64)
  def _reduce_23(val, _values)
     Definition.new val[1], val[3], val[0].downcase.to_sym 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 68)
  def _reduce_24(val, _values)
     Assignment.new val[0], val[2] 
  end
.,.,

# reduce 25 omitted

# reduce 26 omitted

# reduce 27 omitted

# reduce 28 omitted

# reduce 29 omitted

# reduce 30 omitted

# reduce 31 omitted

# reduce 32 omitted

# reduce 33 omitted

# reduce 34 omitted

# reduce 35 omitted

module_eval(<<'.,.,', 'parser.y', 89)
  def _reduce_36(val, _values)
     DPS.new *(val[0].map &:to_i) 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 90)
  def _reduce_37(val, _values)
     val[0].to_i 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 91)
  def _reduce_38(val, _values)
     val[0].to_f 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_39(val, _values)
     val[0].to_s 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module NetLinx
