#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require 'netlinx/parser/lexer'
require 'netlinx/parser/nodes'

module NetLinx
  class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 54)

  def initialize data
    @data = data
    @lexer = NetLinx::Lexer.new data
    # Convert all token names to uppercase.
    @tokens = @lexer.run.map! { |t| [t[0].upcase, t[1]] }
    # p @tokens
  end
  
  def parse
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
  
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
     5,     6,     5,     8,     9,    10 ]

racc_action_check = [
     0,     1,     2,     5,     6,     8 ]

racc_action_pointer = [
   -40,     1,   -38,   nil,   nil,   -62,     4,   nil,    -1,   nil,
   nil ]

racc_action_default = [
    -2,    -8,    -1,    -4,    -6,    -8,    -8,    -3,    -8,    11,
    -7 ]

racc_goto_table = [
     3,     2,     7,     1 ]

racc_goto_check = [
     3,     2,     3,     1 ]

racc_goto_pointer = [
   nil,     3,     1,     0,   nil ]

racc_goto_default = [
   nil,   nil,   nil,   nil,     4 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 68, :_reduce_1,
  0, 68, :_reduce_2,
  2, 69, :_reduce_3,
  1, 69, :_reduce_4,
  0, 69, :_reduce_5,
  1, 70, :_reduce_none,
  3, 71, :_reduce_7 ]

racc_reduce_n = 8

racc_shift_n = 11

racc_token_table = {
  false => 0,
  :error => 1,
  :IDENTIFIER => 2,
  :DPS => 3,
  :NUMBER => 4,
  :DECIMAL => 5,
  :STRING => 6,
  :CHAR => 7,
  :WIDECHAR => 8,
  :INTEGER => 9,
  :SINTEGER => 10,
  :LONG => 11,
  :SLONG => 12,
  :FLOAT => 13,
  :DOUBLE => 14,
  :DEV => 15,
  :DEVCHAN => 16,
  :IF => 17,
  :ELSE => 18,
  :SELECT => 19,
  :ACTIVE => 20,
  :SWITCH => 21,
  :CASE => 22,
  :FOR => 23,
  :WHILE => 24,
  :MEDIUM_WHILE => 25,
  :LONG_WHILE => 26,
  :BREAK => 27,
  :DEFAULT => 28,
  :RETURN => 29,
  :DEFINE_CALL => 30,
  :DEFINE_COMBINE => 31,
  :DEFINE_CONNECT_LEVEL => 32,
  :DEFINE_CONSTANT => 33,
  :DEFINE_DEVICE => 34,
  :DEFINE_EVENT => 35,
  :DEFINE_FUNCTION => 36,
  :DEFINE_LATCHING => 37,
  :DEFINE_MODULE => 38,
  :DEFINE_MUTUALLY_EXCLUSIVE => 39,
  :DEFINE_PROGRAM => 40,
  :DEFINE_START => 41,
  :DEFINE_TOGGLING => 42,
  :DEFINE_TYPE => 43,
  :DEFINE_VARIABLE => 44,
  :PROGRAM_NAME => 45,
  :BUTTON_EVENT => 46,
  :CHANNEL_EVENT => 47,
  :DATA_EVENT => 48,
  :LEVEL_EVENT => 49,
  :REBUILD_EVENT => 50,
  "." => 51,
  "!" => 52,
  "*" => 53,
  "/" => 54,
  "+" => 55,
  "-" => 56,
  ">" => 57,
  ">=" => 58,
  "<" => 59,
  "<=" => 60,
  "==" => 61,
  "!=" => 62,
  "&&" => 63,
  "||" => 64,
  "=" => 65,
  "," => 66 }

racc_nt_base = 67

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IDENTIFIER",
  "DPS",
  "NUMBER",
  "DECIMAL",
  "STRING",
  "CHAR",
  "WIDECHAR",
  "INTEGER",
  "SINTEGER",
  "LONG",
  "SLONG",
  "FLOAT",
  "DOUBLE",
  "DEV",
  "DEVCHAN",
  "IF",
  "ELSE",
  "SELECT",
  "ACTIVE",
  "SWITCH",
  "CASE",
  "FOR",
  "WHILE",
  "MEDIUM_WHILE",
  "LONG_WHILE",
  "BREAK",
  "DEFAULT",
  "RETURN",
  "DEFINE_CALL",
  "DEFINE_COMBINE",
  "DEFINE_CONNECT_LEVEL",
  "DEFINE_CONSTANT",
  "DEFINE_DEVICE",
  "DEFINE_EVENT",
  "DEFINE_FUNCTION",
  "DEFINE_LATCHING",
  "DEFINE_MODULE",
  "DEFINE_MUTUALLY_EXCLUSIVE",
  "DEFINE_PROGRAM",
  "DEFINE_START",
  "DEFINE_TOGGLING",
  "DEFINE_TYPE",
  "DEFINE_VARIABLE",
  "PROGRAM_NAME",
  "BUTTON_EVENT",
  "CHANNEL_EVENT",
  "DATA_EVENT",
  "LEVEL_EVENT",
  "REBUILD_EVENT",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "$start",
  "program",
  "expressions",
  "expression",
  "define_program" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'parser.y', 28)
  def _reduce_1(val, _values)
     Program.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_2(val, _values)
     Program.new 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_3(val, _values)
     val.compact 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_4(val, _values)
     val 
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 35)
  def _reduce_5(val, _values)
     [] 
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.y', 43)
  def _reduce_7(val, _values)
     ProgramName.new val[2] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

  end   # class Parser
  end   # module NetLinx
